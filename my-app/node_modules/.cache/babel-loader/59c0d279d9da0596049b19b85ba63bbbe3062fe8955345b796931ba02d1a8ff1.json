{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Normal_User9000\\\\Desktop\\\\toDoList\\\\my-app-tsx\\\\my-app\\\\src\\\\comps\\\\todoItem.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useMutation } from '@apollo/client';\nimport { TOGGLE_TASK, GET_TASKS } from '../service/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoItem(props) {\n  _s();\n  const dispatch = useDispatch();\n  const [checked, setChecked] = useState(props.task.iscompleted);\n  const [toggleTaskMutation] = useMutation(TOGGLE_TASK, {\n    refetchQueries: [{\n      query: GET_TASKS\n    }] // Refetch the tasks query after toggling\n  });\n\n  const handleToggle = async () => {\n    try {\n      await toggleTaskMutation({\n        variables: {\n          id: props.task.id\n        }\n      });\n      setChecked(!checked);\n    } catch (error) {\n      console.error('Error toggling task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: checked,\n      onChange: handleToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        fontStyle: checked ? 'italic' : 'normal',\n        textDecorationLine: checked ? 'line-through' : 'none',\n        color: checked ? 'gray' : 'black'\n      },\n      children: props.task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoItem, \"LPry8MGZyRyAVL/7gXUpc69v4nk=\", false, function () {\n  return [useDispatch, useMutation];\n});\n_c = TodoItem;\nexport default TodoItem;\nvar _c;\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"names":["React","useState","useDispatch","useMutation","TOGGLE_TASK","GET_TASKS","jsxDEV","_jsxDEV","TodoItem","props","_s","dispatch","checked","setChecked","task","iscompleted","toggleTaskMutation","refetchQueries","query","handleToggle","variables","id","error","console","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","style","fontStyle","textDecorationLine","color","name","_c","$RefreshReg$"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/comps/todoItem.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useMutation } from '@apollo/client';\r\nimport { TOGGLE_TASK, GET_TASKS } from '../service/apiService';\r\nimport { TaskProps } from './todoList';\r\n\r\nfunction TodoItem(props: TaskProps) {\r\n  const dispatch = useDispatch();\r\n  const [checked, setChecked] = useState(props.task.iscompleted);\r\n\r\n  const [toggleTaskMutation] = useMutation(TOGGLE_TASK, {\r\n    refetchQueries: [{ query: GET_TASKS }], // Refetch the tasks query after toggling\r\n  });\r\n\r\n  const handleToggle = async () => {\r\n    try {\r\n      await toggleTaskMutation({ variables: { id: props.task.id } });\r\n      setChecked(!checked);\r\n    } catch (error) {\r\n      console.error('Error toggling task:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={checked}\r\n        onChange={handleToggle}\r\n      />\r\n      <label\r\n        style={{\r\n          fontStyle: checked ? 'italic' : 'normal',\r\n          textDecorationLine: checked ? 'line-through' : 'none',\r\n          color: checked ? 'gray' : 'black',\r\n        }}\r\n      >\r\n        {props.task.name}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,WAAW,EAAEC,SAAS,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/D,SAASC,QAAQA,CAACC,KAAgB,EAAE;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAACQ,KAAK,CAACK,IAAI,CAACC,WAAW,CAAC;EAE9D,MAAM,CAACC,kBAAkB,CAAC,GAAGb,WAAW,CAACC,WAAW,EAAE;IACpDa,cAAc,EAAE,CAAC;MAAEC,KAAK,EAAEb;IAAU,CAAC,CAAC,CAAE;EAC1C,CAAC,CAAC;;EAEF,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMH,kBAAkB,CAAC;QAAEI,SAAS,EAAE;UAAEC,EAAE,EAAEZ,KAAK,CAACK,IAAI,CAACO;QAAG;MAAE,CAAC,CAAC;MAC9DR,UAAU,CAAC,CAACD,OAAO,CAAC;IACtB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEf,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MACEkB,IAAI,EAAC,UAAU;MACfb,OAAO,EAAEA,OAAQ;MACjBc,QAAQ,EAAEP;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACFvB,OAAA;MACEwB,KAAK,EAAE;QACLC,SAAS,EAAEpB,OAAO,GAAG,QAAQ,GAAG,QAAQ;QACxCqB,kBAAkB,EAAErB,OAAO,GAAG,cAAc,GAAG,MAAM;QACrDsB,KAAK,EAAEtB,OAAO,GAAG,MAAM,GAAG;MAC5B,CAAE;MAAAY,QAAA,EAEDf,KAAK,CAACK,IAAI,CAACqB;IAAI;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACpB,EAAA,CAnCQF,QAAQ;EAAA,QACEN,WAAW,EAGCC,WAAW;AAAA;AAAAiC,EAAA,GAJjC5B,QAAQ;AAqCjB,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}