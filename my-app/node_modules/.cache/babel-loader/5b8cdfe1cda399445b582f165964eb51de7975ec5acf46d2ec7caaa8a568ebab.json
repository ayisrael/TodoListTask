{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { GET_TASKS } from \"../service/apiService\";\nconst initialState = {\n  todoList: []\n};\nexport const fetchTasks = createAsyncThunk(\"todoList/fetchTasks\", async () => {\n  const response = await GET_TASKS(); // Replace with the actual API function to fetch tasks\n  return response.tasks;\n});\nconst todoSlice = createSlice({\n  name: \"todoList\",\n  initialState,\n  reducers: {\n    setTodoList: (state, action) => {\n      state.todoList = action.payload;\n    },\n    addTask: (state, action) => {\n      state.todoList.push(action.payload);\n      console.log(action.payload);\n    },\n    deleteTask: (state, action) => {\n      state.todoList = state.todoList.filter(item => item.id !== action.payload.delId);\n    }\n  }\n});\n\n// export { fetchTasks };\nexport const {\n  addTask,\n  deleteTask\n} = todoSlice.actions;\n// export default todoSlice.reducer;\n\nexport const {\n  actions\n} = todoSlice;\nexport default todoSlice.reducer;\n// export const selectTodoList = state => state. this is the addtodo: import { Button, Grid, Input } from \"@mui/material\";","map":{"version":3,"names":["createSlice","createAsyncThunk","GET_TASKS","initialState","todoList","fetchTasks","response","tasks","todoSlice","name","reducers","setTodoList","state","action","payload","addTask","push","console","log","deleteTask","filter","item","id","delId","actions","reducer"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/features/todoSlice.tsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { TaskProps } from \"../comps/todoList\";\r\nimport { GET_TASKS } from \"../service/apiService\";\r\n\r\nexport interface Task {\r\n  name: string;\r\n  id: number;\r\n  iscompleted: boolean;\r\n}\r\nexport interface TodoStateInterface {\r\n  todoSlice: {\r\n    todoList: Task[];\r\n  };\r\n}\r\n\r\nconst initialState = {\r\n  todoList: [] as Task[],\r\n};\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk(\"todoList/fetchTasks\", async () => {\r\n  const response = await GET_TASKS(); // Replace with the actual API function to fetch tasks\r\n  return response.tasks;\r\n});\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todoList\",\r\n  initialState,\r\n  reducers: {\r\n    setTodoList: (state, action) => {\r\n      state.todoList = action.payload;\r\n    },\r\n    addTask: (state, action) => {\r\n      state.todoList.push(action.payload);\r\n      console.log(action.payload);\r\n    },\r\n\r\n    deleteTask: (state, action) => {\r\n      state.todoList = state.todoList.filter(\r\n        (item) => item.id !== action.payload.delId\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\n// export { fetchTasks };\r\nexport const { addTask, deleteTask } = todoSlice.actions;\r\n// export default todoSlice.reducer;\r\n\r\nexport const { actions } = todoSlice;\r\nexport default todoSlice.reducer;\r\n// export const selectTodoList = state => state. this is the addtodo: import { Button, Grid, Input } from \"@mui/material\";\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,SAASC,SAAS,QAAQ,uBAAuB;AAajD,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;AACZ,CAAC;AAGD,OAAO,MAAMC,UAAU,GAAGJ,gBAAgB,CAAC,qBAAqB,EAAE,YAAY;EAC5E,MAAMK,QAAQ,GAAG,MAAMJ,SAAS,CAAC,CAAC,CAAC,CAAC;EACpC,OAAOI,QAAQ,CAACC,KAAK;AACvB,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC5BS,IAAI,EAAE,UAAU;EAChBN,YAAY;EACZO,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACR,QAAQ,GAAGS,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,OAAO,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACR,QAAQ,CAACY,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;MACnCG,OAAO,CAACC,GAAG,CAACL,MAAM,CAACC,OAAO,CAAC;IAC7B,CAAC;IAEDK,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACR,QAAQ,GAAGQ,KAAK,CAACR,QAAQ,CAACgB,MAAM,CACnCC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKT,MAAM,CAACC,OAAO,CAACS,KACvC,CAAC;IACH;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAER,OAAO;EAAEI;AAAW,CAAC,GAAGX,SAAS,CAACgB,OAAO;AACxD;;AAEA,OAAO,MAAM;EAAEA;AAAQ,CAAC,GAAGhB,SAAS;AACpC,eAAeA,SAAS,CAACiB,OAAO;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}