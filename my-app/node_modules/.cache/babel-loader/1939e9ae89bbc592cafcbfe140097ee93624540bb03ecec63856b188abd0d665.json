{"ast":null,"code":"// import React from \"react\";\n// import { useQuery, HttpLink,ApolloClient, InMemoryCache} from \"@apollo/client\";\n// import { gql } from \"@apollo/client\";\n\n// const httpLink = new HttpLink({\n//   uri: \"http://localhost:3000/graphql/\"\n// })\n\n// export const apolloClient = new ApolloClient({\n//   link: httpLink,\n//   cache: new InMemoryCache()\n// });\n\n// export const GET_TASKS = gql`\n//   query {\n//     tasks {\n//       id\n//       name\n//       iscompleted\n//     }\n//   }\n// `;\n\n// const ADD_TASK = gql`\n//   mutation AddTask($name: String!) {\n//     addTask(name: $name, isCompleted: $isCompleted) {\n//       id\n//       name\n//       iscompleted\n//     }\n//   }\n// `;\n\n// const DELETE_TASK = gql`\n//   mutation DeleteTask($id: Int!) {\n//     deleteTask(id: $id)\n//   }\n// `;\n\n// export const getTasks = async() => {\n//     // eslint-disable-next-line react-hooks/rules-of-hooks\n//     const { loading, error, data } = useQuery(GET_TASKS);\n\n//     console.log(data);\n\n//     if (loading) {\n//       return null;\n//     }\n\n//     if (error) {\n//       console.error(\"Error fetching tasks:\", error);\n//       return [];\n//     }\n\n//     return data.tasks;\n//   };","map":{"version":3,"names":[],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/service/apiService.tsx"],"sourcesContent":["// import React from \"react\";\r\n// import { useQuery, HttpLink,ApolloClient, InMemoryCache} from \"@apollo/client\";\r\n// import { gql } from \"@apollo/client\";\r\n\r\n// const httpLink = new HttpLink({\r\n//   uri: \"http://localhost:3000/graphql/\"\r\n// })\r\n\r\n// export const apolloClient = new ApolloClient({\r\n//   link: httpLink,\r\n//   cache: new InMemoryCache()\r\n// });\r\n\r\n// export const GET_TASKS = gql`\r\n//   query {\r\n//     tasks {\r\n//       id\r\n//       name\r\n//       iscompleted\r\n//     }\r\n//   }\r\n// `;\r\n\r\n// const ADD_TASK = gql`\r\n//   mutation AddTask($name: String!) {\r\n//     addTask(name: $name, isCompleted: $isCompleted) {\r\n//       id\r\n//       name\r\n//       iscompleted\r\n//     }\r\n//   }\r\n// `;\r\n\r\n// const DELETE_TASK = gql`\r\n//   mutation DeleteTask($id: Int!) {\r\n//     deleteTask(id: $id)\r\n//   }\r\n// `;\r\n\r\n\r\n// export const getTasks = async() => {\r\n//     // eslint-disable-next-line react-hooks/rules-of-hooks\r\n//     const { loading, error, data } = useQuery(GET_TASKS);\r\n  \r\n//     console.log(data);\r\n    \r\n//     if (loading) {\r\n//       return null;\r\n//     }\r\n  \r\n//     if (error) {\r\n//       console.error(\"Error fetching tasks:\", error);\r\n//       return [];\r\n//     }\r\n  \r\n//     return data.tasks;\r\n//   };\r\n  "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}