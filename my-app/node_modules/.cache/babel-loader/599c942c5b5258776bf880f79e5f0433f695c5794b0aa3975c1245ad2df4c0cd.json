{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Normal_User9000\\\\Desktop\\\\toDoList\\\\my-app-tsx\\\\my-app\\\\src\\\\comps\\\\todoItem.tsx\",\n  _s = $RefreshSig$();\nimport { Checkbox, IconButton, ListItem, ListItemButton, ListItemIcon, ListItemText } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { TOGGLE_TASK, GET_TASKS, DELETE_TASK } from '../service/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TodoItem(props) {\n  _s();\n  const [checked, setChecked] = useState(props.task.iscompleted);\n  const [deleteTaskMutation] = useMutation(DELETE_TASK, {\n    refetchQueries: [{\n      query: GET_TASKS\n    }] // Refetch the tasks query after toggling\n  });\n\n  const [toggleTaskMutation] = useMutation(TOGGLE_TASK, {\n    // refetchQueries: [{ query: GET_TASKS }], // Refetch the tasks query after toggling\n  });\n  const handleToggle = async () => {\n    try {\n      await toggleTaskMutation({\n        variables: {\n          id: props.task.id\n        }\n      });\n      setChecked(!checked);\n    } catch (error) {\n      console.error('Error toggling task:', error);\n    }\n  };\n  const handleDelete = async () => {\n    deleteTaskMutation({\n      variables: {\n        id: props.task.id\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    disablePadding: true,\n    children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          edge: \"start\",\n          checked: checked,\n          onChange: handleToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: props.task.name,\n        style: {\n          fontStyle: checked ? 'italic' : 'normal',\n          textDecorationLine: checked ? 'line-through' : 'none',\n          color: checked ? 'gray' : 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleDelete,\n        edge: \"end\",\n        \"aria-label\": \"delete\",\n        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n          style: {\n            color: 'red'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoItem, \"ImwqFqx/Ib+oL8+JywbZuG/bcf4=\", false, function () {\n  return [useMutation, useMutation];\n});\n_c = TodoItem;\nvar _c;\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"names":["Checkbox","IconButton","ListItem","ListItemButton","ListItemIcon","ListItemText","DeleteIcon","React","useState","useMutation","TOGGLE_TASK","GET_TASKS","DELETE_TASK","jsxDEV","_jsxDEV","TodoItem","props","_s","checked","setChecked","task","iscompleted","deleteTaskMutation","refetchQueries","query","toggleTaskMutation","handleToggle","variables","id","error","console","handleDelete","disablePadding","children","edge","onChange","fileName","_jsxFileName","lineNumber","columnNumber","primary","name","style","fontStyle","textDecorationLine","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/comps/todoItem.tsx"],"sourcesContent":["import { Checkbox, IconButton, ListItem, ListItemButton, ListItemIcon, ListItemText } from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { TOGGLE_TASK, GET_TASKS, DELETE_TASK } from '../service/apiService';\r\nimport { TaskProps } from './todoList';\r\n\r\nexport function TodoItem(props: TaskProps) {\r\n  const [checked, setChecked] = useState(props.task.iscompleted);\r\n  const [deleteTaskMutation] = useMutation(DELETE_TASK, {\r\n    refetchQueries: [{ query: GET_TASKS }], // Refetch the tasks query after toggling\r\n  });\r\n  const [toggleTaskMutation] = useMutation(TOGGLE_TASK, {\r\n    // refetchQueries: [{ query: GET_TASKS }], // Refetch the tasks query after toggling\r\n  });\r\n\r\n  const handleToggle = async () => {\r\n    try {\r\n      await toggleTaskMutation({ variables: { id: props.task.id } });\r\n      setChecked(!checked);\r\n    } catch (error) {\r\n      console.error('Error toggling task:', error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    deleteTaskMutation({ variables: { id:props.task.id } });\r\n  };\r\n\r\n  return (\r\n    <ListItem disablePadding>\r\n      <ListItemButton>\r\n        <ListItemIcon>\r\n          <Checkbox edge=\"start\" checked={checked} onChange={handleToggle} />\r\n        </ListItemIcon>\r\n        <ListItemText\r\n          primary={props.task.name}\r\n          style={{\r\n            fontStyle: checked ? 'italic' : 'normal',\r\n            textDecorationLine: checked ? 'line-through' : 'none',\r\n            color: checked ? 'gray' : 'black',\r\n          }}\r\n        />\r\n        <IconButton onClick={handleDelete} edge=\"end\" aria-label=\"delete\">\r\n          <DeleteIcon style={{ color: 'red' }} />\r\n        </IconButton>\r\n      </ListItemButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}