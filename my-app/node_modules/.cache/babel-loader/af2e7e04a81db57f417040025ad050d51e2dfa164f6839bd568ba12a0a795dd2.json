{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// const initState = {\n//   todos_ar: [\n//     { name: \"go to work\", id: 1 },\n//     { name: \"go to Gym\", id: 2 },\n//     { name: \"go to home\", id: 3 },\n//     { name: \"go to shnatz\", id: 4 },\n//     { name: \"go to eat\", id: 5 },\n//     { name: \"go to sleep\", id: 6 },\n//   ],\n// };\n\n// const todoSlice = createSlice({\n//   name: \"todo\",\n//   initialState: initState,\n//   reducers: {\n//     addNewItem: (state, action) => {\n//       state.todos_ar.push(action.payload.todoItem);\n//     },\n//     delItem: (state, action) => {\n//         state.todos_ar= state.todos_ar.filter((item)=> item.id!==action.payload.delId)\n//     },\n//   },\n// });\n\n// export const {addNewItem, delItem} = todoSlice.actions ;\n// export default todoSlice.reducer;\nimport { createSlice } from '@reduxjs/toolkit';\nimport { gql, useQuery, useMutation } from '@apollo/client';\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState: {\n    todos_ar: []\n  },\n  reducers: {\n    setTasks: (state, action) => {\n      state.todos_ar = action.payload.tasks;\n    },\n    addNewItem: (state, action) => {\n      state.todos_ar.push(action.payload.todoItem);\n    },\n    delItem: (state, action) => {\n      state.todos_ar = state.todos_ar.filter(item => item !== action.payload.delId);\n    }\n  }\n});\n\n// GraphQL query definition to fetch tasks\nconst GET_TASKS = gql`\n  query {\n    tasks {\n      id\n      name\n    }\n  }\n`;\n\n// GraphQL mutation definition to add a new task\nconst ADD_TASK = gql`\n  mutation AddTask($name: String) {\n    addTask(name: $name) {\n      id\n      name\n    }\n  }\n`;\n\n// GraphQL mutation definition to delete a task\nconst DELETE_TASK = gql`\n  mutation DeleteTask($id: Int) {\n    deleteTask(id: $id)\n  }\n`;\n\n// Action creator to fetch tasks from the server\nexport const fetchTasks = () => {\n  var _s = $RefreshSig$();\n  return _s(async dispatch => {\n    _s();\n    try {\n      const {\n        data\n      } = await useQuery(GET_TASKS);\n      dispatch(todoSlice.actions.setTasks(data.tasks));\n    } catch (error) {\n      console.log('Error fetching tasks:', error);\n      throw new Error('Failed to fetch tasks');\n    }\n  }, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [useQuery];\n  });\n};\n\n// Action creator to add a new task using the Apollo mutation\nexport const addNewTask = name => {\n  var _s2 = $RefreshSig$();\n  return _s2(async dispatch => {\n    _s2();\n    try {\n      const [addTask] = useMutation(ADD_TASK);\n      const response = await addTask({\n        variables: {\n          name\n        }\n      });\n      dispatch(todoSlice.actions.addNewItem(response.data.addTask));\n    } catch (error) {\n      console.log('Error adding task:', error);\n      throw new Error('Failed to add task');\n    }\n  }, \"5472LmJndBUsRlLE2NyawSSB2X0=\", false, function () {\n    return [useMutation];\n  });\n};\n\n// Action creator to delete a task using the Apollo mutation\nexport const deleteTask = id => {\n  var _s3 = $RefreshSig$();\n  return _s3(async dispatch => {\n    _s3();\n    try {\n      const [deleteTask] = useMutation(DELETE_TASK);\n      const response = await deleteTask({\n        variables: {\n          id\n        }\n      });\n      if (response.data.deleteTask) {\n        dispatch(todoSlice.actions.delItem({\n          delId: id\n        }));\n      }\n    } catch (error) {\n      console.log('Error deleting task:', error);\n      throw new Error('Failed to delete task');\n    }\n  }, \"WERufXhPoo+MVEF0vJ+fgHc/WgY=\", false, function () {\n    return [useMutation];\n  });\n};\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","gql","useQuery","useMutation","todoSlice","name","initialState","todos_ar","reducers","setTasks","state","action","payload","tasks","addNewItem","push","todoItem","delItem","filter","item","delId","GET_TASKS","ADD_TASK","DELETE_TASK","fetchTasks","_s","$RefreshSig$","dispatch","data","actions","error","console","log","Error","addNewTask","_s2","addTask","response","variables","deleteTask","id","_s3","reducer"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/features/todoSlice.tsx"],"sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n// const initState = {\r\n//   todos_ar: [\r\n//     { name: \"go to work\", id: 1 },\r\n//     { name: \"go to Gym\", id: 2 },\r\n//     { name: \"go to home\", id: 3 },\r\n//     { name: \"go to shnatz\", id: 4 },\r\n//     { name: \"go to eat\", id: 5 },\r\n//     { name: \"go to sleep\", id: 6 },\r\n//   ],\r\n// };\r\n\r\n// const todoSlice = createSlice({\r\n//   name: \"todo\",\r\n//   initialState: initState,\r\n//   reducers: {\r\n//     addNewItem: (state, action) => {\r\n//       state.todos_ar.push(action.payload.todoItem);\r\n//     },\r\n//     delItem: (state, action) => {\r\n//         state.todos_ar= state.todos_ar.filter((item)=> item.id!==action.payload.delId)\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export const {addNewItem, delItem} = todoSlice.actions ;\r\n// export default todoSlice.reducer;\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { gql, useQuery, useMutation } from '@apollo/client';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst todoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState: { todos_ar: [] },\r\n  reducers: {\r\n    setTasks: (state, action) => {\r\n      state.todos_ar = action.payload.tasks;\r\n    },\r\n    addNewItem: (state, action) => {\r\n      state.todos_ar.push(action.payload.todoItem);\r\n    },\r\n    delItem: (state, action) => {\r\n      state.todos_ar = state.todos_ar.filter((item) => item !== action.payload.delId);\r\n    },\r\n  },\r\n});\r\n\r\n// GraphQL query definition to fetch tasks\r\nconst GET_TASKS = gql`\r\n  query {\r\n    tasks {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\n// GraphQL mutation definition to add a new task\r\nconst ADD_TASK = gql`\r\n  mutation AddTask($name: String) {\r\n    addTask(name: $name) {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\n// GraphQL mutation definition to delete a task\r\nconst DELETE_TASK = gql`\r\n  mutation DeleteTask($id: Int) {\r\n    deleteTask(id: $id)\r\n  }\r\n`;\r\n\r\n// Action creator to fetch tasks from the server\r\nexport const fetchTasks = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const { data } = await useQuery(GET_TASKS);\r\n      dispatch(todoSlice.actions.setTasks(data.tasks));\r\n    } catch (error) {\r\n      console.log('Error fetching tasks:', error);\r\n      throw new Error('Failed to fetch tasks');\r\n    }\r\n  };\r\n};\r\n\r\n// Action creator to add a new task using the Apollo mutation\r\nexport const addNewTask = (name) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const [addTask] = useMutation(ADD_TASK);\r\n      const response = await addTask({ variables: { name } });\r\n      dispatch(todoSlice.actions.addNewItem(response.data.addTask));\r\n    } catch (error) {\r\n      console.log('Error adding task:', error);\r\n      throw new Error('Failed to add task');\r\n    }\r\n  };\r\n};\r\n\r\n// Action creator to delete a task using the Apollo mutation\r\nexport const deleteTask = (id) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const [deleteTask] = useMutation(DELETE_TASK);\r\n      const response = await deleteTask({ variables: { id } });\r\n      if (response.data.deleteTask) {\r\n        dispatch(todoSlice.actions.delItem({ delId: id }));\r\n      }\r\n    } catch (error) {\r\n      console.log('Error deleting task:', error);\r\n      throw new Error('Failed to delete task');\r\n    }\r\n  };\r\n};\r\n\r\nexport default todoSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}