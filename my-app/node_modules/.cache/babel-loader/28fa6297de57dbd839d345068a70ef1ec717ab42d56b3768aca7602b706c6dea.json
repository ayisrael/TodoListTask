{"ast":null,"code":"var _s = $RefreshSig$();\n// import React from \"react\";\n// import { useQuery, HttpLink,ApolloClient, InMemoryCache} from \"@apollo/client\";\n// import { gql } from \"@apollo/client\";\n\n// const httpLink = new HttpLink({\n//   uri: \"http://localhost:3000/graphql/\"\n// })\n\n// export const apolloClient = new ApolloClient({\n//   link: httpLink,\n//   cache: new InMemoryCache()\n// });\n\n// export const GET_TASKS = gql`\n//   query {\n//     tasks {\n//       id\n//       name\n//       iscompleted\n//     }\n//   }\n// `;\n\n// const ADD_TASK = gql`\n//   mutation AddTask($name: String!) {\n//     addTask(name: $name, isCompleted: $isCompleted) {\n//       id\n//       name\n//       iscompleted\n//     }\n//   }\n// `;\n\n// const DELETE_TASK = gql`\n//   mutation DeleteTask($id: Int!) {\n//     deleteTask(id: $id)\n//   }\n// `;\n\n// export const getTasks = async() => {\n//     // eslint-disable-next-line react-hooks/rules-of-hooks\n//     const { loading, error, data } = useQuery(GET_TASKS);\n\n//     console.log(data);\n\n//     if (loading) {\n//       return null;\n//     }\n\n//     if (error) {\n//       console.error(\"Error fetching tasks:\", error);\n//       return [];\n//     }\n\n//     return data.tasks;\n//   };\n\nimport { ApolloClient, HttpLink, InMemoryCache, useQuery, gql } from \"@apollo/client\";\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:3000/graphql/\"\n});\nexport const apolloClient = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\nexport const GET_TASKS = gql`\n  query {\n    tasks {\n      id\n      name\n      iscompleted\n    }\n  }\n`;\nconst ADD_TASK = gql`\n  mutation AddTask($name: String!) {\n    addTask(name: $name, isCompleted: $isCompleted) {\n      id\n      name\n      iscompleted\n    }\n  }\n`;\nconst DELETE_TASK = gql`\n  mutation DeleteTask($id: Int!) {\n    deleteTask(id: $id)\n  }\n`;\nexport const getTasks = async () => {\n  _s();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TASKS);\n  console.log(data);\n  if (loading) {\n    return null;\n  }\n  if (error) {\n    console.error(\"Error fetching tasks:\", error);\n    return [];\n  }\n  return data.tasks;\n};\n_s(getTasks, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\nexport const createTask = async name => {\n  try {\n    await apolloClient.mutate({\n      mutation: ADD_TASK,\n      variables: {\n        name\n      }\n    });\n  } catch (error) {\n    console.error(\"Error creating task:\", error);\n  }\n};\nexport const deleteTask = async id => {\n  try {\n    await apolloClient.mutate({\n      mutation: DELETE_TASK,\n      variables: {\n        id\n      }\n    });\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n  }\n};","map":{"version":3,"names":["ApolloClient","HttpLink","InMemoryCache","useQuery","gql","httpLink","uri","apolloClient","link","cache","GET_TASKS","ADD_TASK","DELETE_TASK","getTasks","_s","loading","error","data","console","log","tasks","createTask","name","mutate","mutation","variables","deleteTask","id"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/service/apiService.tsx"],"sourcesContent":["// import React from \"react\";\r\n// import { useQuery, HttpLink,ApolloClient, InMemoryCache} from \"@apollo/client\";\r\n// import { gql } from \"@apollo/client\";\r\n\r\n// const httpLink = new HttpLink({\r\n//   uri: \"http://localhost:3000/graphql/\"\r\n// })\r\n\r\n// export const apolloClient = new ApolloClient({\r\n//   link: httpLink,\r\n//   cache: new InMemoryCache()\r\n// });\r\n\r\n// export const GET_TASKS = gql`\r\n//   query {\r\n//     tasks {\r\n//       id\r\n//       name\r\n//       iscompleted\r\n//     }\r\n//   }\r\n// `;\r\n\r\n// const ADD_TASK = gql`\r\n//   mutation AddTask($name: String!) {\r\n//     addTask(name: $name, isCompleted: $isCompleted) {\r\n//       id\r\n//       name\r\n//       iscompleted\r\n//     }\r\n//   }\r\n// `;\r\n\r\n// const DELETE_TASK = gql`\r\n//   mutation DeleteTask($id: Int!) {\r\n//     deleteTask(id: $id)\r\n//   }\r\n// `;\r\n\r\n\r\n// export const getTasks = async() => {\r\n//     // eslint-disable-next-line react-hooks/rules-of-hooks\r\n//     const { loading, error, data } = useQuery(GET_TASKS);\r\n  \r\n//     console.log(data);\r\n    \r\n//     if (loading) {\r\n//       return null;\r\n//     }\r\n  \r\n//     if (error) {\r\n//       console.error(\"Error fetching tasks:\", error);\r\n//       return [];\r\n//     }\r\n  \r\n//     return data.tasks;\r\n//   };\r\n  \r\n\r\nimport {\r\n  ApolloClient,\r\n  HttpLink,\r\n  InMemoryCache,\r\n  useQuery,\r\n  gql,\r\n} from \"@apollo/client\";\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: \"http://localhost:3000/graphql/\",\r\n});\r\n\r\nexport const apolloClient = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport const GET_TASKS = gql`\r\n  query {\r\n    tasks {\r\n      id\r\n      name\r\n      iscompleted\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_TASK = gql`\r\n  mutation AddTask($name: String!) {\r\n    addTask(name: $name, isCompleted: $isCompleted) {\r\n      id\r\n      name\r\n      iscompleted\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_TASK = gql`\r\n  mutation DeleteTask($id: Int!) {\r\n    deleteTask(id: $id)\r\n  }\r\n`;\r\n\r\nexport const getTasks = async () => {\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  const { loading, error, data } = useQuery(GET_TASKS);\r\n\r\n  console.log(data);\r\n\r\n  if (loading) {\r\n    return null;\r\n  }\r\n\r\n  if (error) {\r\n    console.error(\"Error fetching tasks:\", error);\r\n    return [];\r\n  }\r\n\r\n  return data.tasks;\r\n};\r\n\r\nexport const createTask = async (name: string) => {\r\n  try {\r\n    await apolloClient.mutate({\r\n      mutation: ADD_TASK,\r\n      variables: {\r\n        name,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating task:\", error);\r\n  }\r\n};\r\n\r\nexport const deleteTask = async (id: number) => {\r\n  try {\r\n    await apolloClient.mutate({\r\n      mutation: DELETE_TASK,\r\n      variables: {\r\n        id,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error deleting task:\", error);\r\n  }\r\n};\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,SACEA,YAAY,EACZC,QAAQ,EACRC,aAAa,EACbC,QAAQ,EACRC,GAAG,QACE,gBAAgB;AAEvB,MAAMC,QAAQ,GAAG,IAAIJ,QAAQ,CAAC;EAC5BK,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,IAAIP,YAAY,CAAC;EAC3CQ,IAAI,EAAEH,QAAQ;EACdI,KAAK,EAAE,IAAIP,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMQ,SAAS,GAAGN,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMO,QAAQ,GAAGP,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMQ,WAAW,GAAGR,GAAI;AACxB;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMS,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAAAC,EAAA;EAClC;EACA,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGd,QAAQ,CAACO,SAAS,CAAC;EAEpDQ,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEjB,IAAIF,OAAO,EAAE;IACX,OAAO,IAAI;EACb;EAEA,IAAIC,KAAK,EAAE;IACTE,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE;EACX;EAEA,OAAOC,IAAI,CAACG,KAAK;AACnB,CAAC;AAACN,EAAA,CAhBWD,QAAQ;EAAA,QAEcV,QAAQ;AAAA;AAgB3C,OAAO,MAAMkB,UAAU,GAAG,MAAOC,IAAY,IAAK;EAChD,IAAI;IACF,MAAMf,YAAY,CAACgB,MAAM,CAAC;MACxBC,QAAQ,EAAEb,QAAQ;MAClBc,SAAS,EAAE;QACTH;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAON,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAMU,UAAU,GAAG,MAAOC,EAAU,IAAK;EAC9C,IAAI;IACF,MAAMpB,YAAY,CAACgB,MAAM,CAAC;MACxBC,QAAQ,EAAEZ,WAAW;MACrBa,SAAS,EAAE;QACTE;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}