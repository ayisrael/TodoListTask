{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, HttpLink, ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\n// import { useDispatch, useSelector } from \"react-redux\";\n\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:3000/graphql/\"\n});\nexport const apolloClient = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\n// // Define your GraphQL queries and mutations\nexport const GET_TASKS = gql`\n  query {\n    tasks {\n      id\n      name\n      iscompleted\n    }\n  }\n`;\nconst ADD_TASK = gql`\n  mutation AddTask($name: String!) {\n    addTask(name: $name, isCompleted: $isCompleted) {\n      id\n      name\n      iscompleted\n    }\n  }\n`;\nconst DELETE_TASK = gql`\n  mutation DeleteTask($id: Int!) {\n    deleteTask(id: $id)\n  }\n`;\nexport const getTasks = async () => {\n  _s();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TASKS);\n  console.log(data);\n  if (loading) {\n    // Return a loading state or null while data is being fetched\n    return null;\n  }\n  if (error) {\n    // Handle the error condition\n    console.error(\"Error fetching tasks:\", error);\n    return [];\n  }\n  return data.tasks;\n};\n\n// export const getTasks = async () => {\n//   try {\n//     console.log(\"hi from api\");\n//     const response = await client.query({ query: GET_TASKS });\n//     console.log(response.data.tasks);\n//     return response.data.tasks;\n//   } catch (error) {\n//     console.error(\"Error fetching tasks:\", error);\n//   }\n// };\n\n// function TodoList() {\n//   const dispatch = useDispatch();\n//   const listTask = useSelector((state) => state.todoList.listTask);\n\n//   const { loading, error, data } = useQuery(GET_TASKS);\n\n//   const [createTask] = useMutation(CREATE_TASK, {\n//     update(cache, { data: { createTask } }) {\n//       cache.modify({\n//         fields: {\n//           tasks(existingTasks = []) {\n//             const newTaskRef = cache.writeFragment({\n//               data: createTask,\n//               fragment: gql`\n//                 fragment NewTask on Task {\n//                   id\n//                   name\n//                   isCompleted\n//                 }\n//               `,\n//             });\n//             return [...existingTasks, newTaskRef];\n//           },\n//         },\n//       });\n//     },\n//   });\n\n//   const [deleteTaskMutation] = useMutation(DELETE_TASK, {\n//     update(cache, { data: { deleteTask } }) {\n//       cache.modify({\n//         fields: {\n//           tasks(existingTasks = [], { readField }) {\n//             return existingTasks.filter(\n//               (taskRef) => deleteTask !== readField('id', taskRef)\n//             );\n//           },\n//         },\n//       });\n//     },\n//   });\n\n//   const handleAddTask = () => {\n//     const newTask = {\n//       name: 'New Task',\n//       isCompleted: false,\n//     };\n\n//     createTask({ variables: newTask });\n//   };\n\n//   const handleDeleteTask = (id: number) => {\n//     deleteTaskMutation({ variables: { id } });\n//   };\n\n//   if (loading) return <div>Loading...</div>;\n//   if (error) return <div>Error: {error.message}</div>;\n\n//   return (\n//     <div>\n//       <ul>\n//         {data.tasks.map((task: any) => (\n//           <li key={task.id}>\n//             {task.name}{' '}\n//             <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//       <button onClick={handleAddTask}>Add Task</button>\n//     </div>\n//   );\n// }\n_s(getTasks, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","HttpLink","ApolloClient","InMemoryCache","gql","httpLink","uri","apolloClient","link","cache","GET_TASKS","ADD_TASK","DELETE_TASK","getTasks","_s","loading","error","data","console","log","tasks"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/service/apiService.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useQuery, HttpLink,ApolloClient, InMemoryCache} from \"@apollo/client\";\r\nimport { gql } from \"@apollo/client\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: \"http://localhost:3000/graphql/\"\r\n})\r\n\r\nexport const apolloClient = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n// // Define your GraphQL queries and mutations\r\nexport const GET_TASKS = gql`\r\n  query {\r\n    tasks {\r\n      id\r\n      name\r\n      iscompleted\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_TASK = gql`\r\n  mutation AddTask($name: String!) {\r\n    addTask(name: $name, isCompleted: $isCompleted) {\r\n      id\r\n      name\r\n      iscompleted\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_TASK = gql`\r\n  mutation DeleteTask($id: Int!) {\r\n    deleteTask(id: $id)\r\n  }\r\n`;\r\n\r\n\r\nexport const getTasks = async() => {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const { loading, error, data } = useQuery(GET_TASKS);\r\n  \r\n    console.log(data);\r\n    \r\n    if (loading) {\r\n      // Return a loading state or null while data is being fetched\r\n      return null;\r\n    }\r\n  \r\n    if (error) {\r\n      // Handle the error condition\r\n      console.error(\"Error fetching tasks:\", error);\r\n      return [];\r\n    }\r\n  \r\n    return data.tasks;\r\n  };\r\n  \r\n// export const getTasks = async () => {\r\n//   try {\r\n//     console.log(\"hi from api\");\r\n//     const response = await client.query({ query: GET_TASKS });\r\n//     console.log(response.data.tasks);\r\n//     return response.data.tasks;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching tasks:\", error);\r\n//   }\r\n// };\r\n\r\n// function TodoList() {\r\n//   const dispatch = useDispatch();\r\n//   const listTask = useSelector((state) => state.todoList.listTask);\r\n\r\n//   const { loading, error, data } = useQuery(GET_TASKS);\r\n\r\n//   const [createTask] = useMutation(CREATE_TASK, {\r\n//     update(cache, { data: { createTask } }) {\r\n//       cache.modify({\r\n//         fields: {\r\n//           tasks(existingTasks = []) {\r\n//             const newTaskRef = cache.writeFragment({\r\n//               data: createTask,\r\n//               fragment: gql`\r\n//                 fragment NewTask on Task {\r\n//                   id\r\n//                   name\r\n//                   isCompleted\r\n//                 }\r\n//               `,\r\n//             });\r\n//             return [...existingTasks, newTaskRef];\r\n//           },\r\n//         },\r\n//       });\r\n//     },\r\n//   });\r\n\r\n//   const [deleteTaskMutation] = useMutation(DELETE_TASK, {\r\n//     update(cache, { data: { deleteTask } }) {\r\n//       cache.modify({\r\n//         fields: {\r\n//           tasks(existingTasks = [], { readField }) {\r\n//             return existingTasks.filter(\r\n//               (taskRef) => deleteTask !== readField('id', taskRef)\r\n//             );\r\n//           },\r\n//         },\r\n//       });\r\n//     },\r\n//   });\r\n\r\n//   const handleAddTask = () => {\r\n//     const newTask = {\r\n//       name: 'New Task',\r\n//       isCompleted: false,\r\n//     };\r\n\r\n//     createTask({ variables: newTask });\r\n//   };\r\n\r\n//   const handleDeleteTask = (id: number) => {\r\n//     deleteTaskMutation({ variables: { id } });\r\n//   };\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (error) return <div>Error: {error.message}</div>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <ul>\r\n//         {data.tasks.map((task: any) => (\r\n//           <li key={task.id}>\r\n//             {task.name}{' '}\r\n//             <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <button onClick={handleAddTask}>Add Task</button>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":";AACA,SAASA,QAAQ,EAAEC,QAAQ,EAACC,YAAY,EAAEC,aAAa,QAAO,gBAAgB;AAC9E,SAASC,GAAG,QAAQ,gBAAgB;AACpC;;AAEA,MAAMC,QAAQ,GAAG,IAAIJ,QAAQ,CAAC;EAC5BK,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,IAAIL,YAAY,CAAC;EAC3CM,IAAI,EAAEH,QAAQ;EACdI,KAAK,EAAE,IAAIN,aAAa,CAAC;AAC3B,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMO,SAAS,GAAGN,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMO,QAAQ,GAAGP,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMQ,WAAW,GAAGR,GAAI;AACxB;AACA;AACA;AACA,CAAC;AAGD,OAAO,MAAMS,QAAQ,GAAG,MAAAA,CAAA,KAAW;EAAAC,EAAA;EAC/B;EACA,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGjB,QAAQ,CAACU,SAAS,CAAC;EAEpDQ,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEjB,IAAIF,OAAO,EAAE;IACX;IACA,OAAO,IAAI;EACb;EAEA,IAAIC,KAAK,EAAE;IACT;IACAE,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE;EACX;EAEA,OAAOC,IAAI,CAACG,KAAK;AACnB,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAN,EAAA,CAtGaD,QAAQ;EAAA,QAEgBb,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}