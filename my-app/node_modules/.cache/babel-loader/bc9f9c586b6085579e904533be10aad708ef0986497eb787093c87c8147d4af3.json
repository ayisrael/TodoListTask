{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery, HttpLink, ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:3000/graphql/\"\n});\nexport const apolloClient = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\nexport const GET_TASKS = gql`\n  query {\n    tasks {\n      id\n      name\n      iscompleted\n    }\n  }\n`;\nconst ADD_TASK = gql`\n  mutation AddTask($name: String!) {\n    addTask(name: $name, isCompleted: $isCompleted) {\n      id\n      name\n      iscompleted\n    }\n  }\n`;\nconst DELETE_TASK = gql`\n  mutation DeleteTask($id: Int!) {\n    deleteTask(id: $id)\n  }\n`;\nexport const getTasks = async () => {\n  _s();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TASKS);\n  console.log(data);\n  if (loading) {\n    return null;\n  }\n  if (error) {\n    // Handle the error condition\n    console.error(\"Error fetching tasks:\", error);\n    return [];\n  }\n  return data.tasks;\n};\n_s(getTasks, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","HttpLink","ApolloClient","InMemoryCache","gql","httpLink","uri","apolloClient","link","cache","GET_TASKS","ADD_TASK","DELETE_TASK","getTasks","_s","loading","error","data","console","log","tasks"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/service/apiService.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useQuery, HttpLink,ApolloClient, InMemoryCache} from \"@apollo/client\";\r\nimport { gql } from \"@apollo/client\";\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: \"http://localhost:3000/graphql/\"\r\n})\r\n\r\nexport const apolloClient = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nexport const GET_TASKS = gql`\r\n  query {\r\n    tasks {\r\n      id\r\n      name\r\n      iscompleted\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_TASK = gql`\r\n  mutation AddTask($name: String!) {\r\n    addTask(name: $name, isCompleted: $isCompleted) {\r\n      id\r\n      name\r\n      iscompleted\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_TASK = gql`\r\n  mutation DeleteTask($id: Int!) {\r\n    deleteTask(id: $id)\r\n  }\r\n`;\r\n\r\n\r\nexport const getTasks = async() => {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const { loading, error, data } = useQuery(GET_TASKS);\r\n  \r\n    console.log(data);\r\n    \r\n    if (loading) {\r\n      return null;\r\n    }\r\n  \r\n    if (error) {\r\n      // Handle the error condition\r\n      console.error(\"Error fetching tasks:\", error);\r\n      return [];\r\n    }\r\n  \r\n    return data.tasks;\r\n  };\r\n  "],"mappings":";AACA,SAASA,QAAQ,EAAEC,QAAQ,EAACC,YAAY,EAAEC,aAAa,QAAO,gBAAgB;AAC9E,SAASC,GAAG,QAAQ,gBAAgB;AAEpC,MAAMC,QAAQ,GAAG,IAAIJ,QAAQ,CAAC;EAC5BK,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,IAAIL,YAAY,CAAC;EAC3CM,IAAI,EAAEH,QAAQ;EACdI,KAAK,EAAE,IAAIN,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMO,SAAS,GAAGN,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMO,QAAQ,GAAGP,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMQ,WAAW,GAAGR,GAAI;AACxB;AACA;AACA;AACA,CAAC;AAGD,OAAO,MAAMS,QAAQ,GAAG,MAAAA,CAAA,KAAW;EAAAC,EAAA;EAC/B;EACA,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGjB,QAAQ,CAACU,SAAS,CAAC;EAEpDQ,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEjB,IAAIF,OAAO,EAAE;IACX,OAAO,IAAI;EACb;EAEA,IAAIC,KAAK,EAAE;IACT;IACAE,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE;EACX;EAEA,OAAOC,IAAI,CAACG,KAAK;AACnB,CAAC;AAACN,EAAA,CAjBSD,QAAQ;EAAA,QAEgBb,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}