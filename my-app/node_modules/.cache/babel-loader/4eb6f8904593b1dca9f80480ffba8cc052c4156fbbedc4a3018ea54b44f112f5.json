{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache, gql } from '@apollo/client';\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:3000/graphql'\n});\nexport const apolloClient = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\nexport const GET_TASKS = gql`\n  query GetTasks {\n    tasks {\n      id\n      name\n      iscompleted\n    }\n  }\n`;\nconst ADD_TASK = gql`\n  mutation AddTask($name: String!) {\n    addTask(name: $name) {\n      name\n    }\n  }\n`;\nconst DELETE_TASK = gql`\n  mutation DeleteTask($id: Int!) {\n    deleteTask(id: $id)\n  }\n`;\nexport const getTasks = async () => {\n  try {\n    const {\n      data\n    } = await apolloClient.query({\n      query: GET_TASKS\n    });\n    return data.tasks;\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    return [];\n  }\n};\nexport const createTask = async name => {\n  try {\n    await apolloClient.mutate({\n      mutation: ADD_TASK,\n      variables: {\n        name\n      },\n      refetchQueries: [{\n        query: GET_TASKS\n      }]\n    });\n  } catch (error) {\n    console.error('Error creating task:', error);\n  }\n};\nexport const deleteTask = async id => {\n  try {\n    await apolloClient.mutate({\n      mutation: DELETE_TASK,\n      variables: {\n        id\n      },\n      refetchQueries: [{\n        query: GET_TASKS\n      }]\n    });\n  } catch (error) {\n    console.error('Error deleting task:', error);\n  }\n};","map":{"version":3,"names":["ApolloClient","HttpLink","InMemoryCache","gql","httpLink","uri","apolloClient","link","cache","GET_TASKS","ADD_TASK","DELETE_TASK","getTasks","data","query","tasks","error","console","createTask","name","mutate","mutation","variables","refetchQueries","deleteTask","id"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/service/apiService.tsx"],"sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, useQuery, gql } from '@apollo/client';\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: 'http://localhost:3000/graphql',\r\n});\r\n\r\nexport const apolloClient = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport const GET_TASKS = gql`\r\n  query GetTasks {\r\n    tasks {\r\n      id\r\n      name\r\n      iscompleted\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_TASK = gql`\r\n  mutation AddTask($name: String!) {\r\n    addTask(name: $name) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_TASK = gql`\r\n  mutation DeleteTask($id: Int!) {\r\n    deleteTask(id: $id)\r\n  }\r\n`;\r\n\r\nexport const getTasks = async () => {\r\n  try {\r\n    const { data } = await apolloClient.query({\r\n      query: GET_TASKS,\r\n    });\r\n\r\n    return data.tasks;\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const createTask = async (name: string) => {\r\n  try {\r\n    await apolloClient.mutate({\r\n      mutation: ADD_TASK,\r\n      variables: {\r\n        name,\r\n      },\r\n      refetchQueries: [{ query: GET_TASKS }],\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);\r\n  }\r\n};\r\n\r\nexport const deleteTask = async (id: number) => {\r\n  try {\r\n    await apolloClient.mutate({\r\n      mutation: DELETE_TASK,\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [{ query: GET_TASKS }],\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting task:', error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,QAAQ,EAAEC,aAAa,EAAYC,GAAG,QAAQ,gBAAgB;AAErF,MAAMC,QAAQ,GAAG,IAAIH,QAAQ,CAAC;EAC5BI,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,IAAIN,YAAY,CAAC;EAC3CO,IAAI,EAAEH,QAAQ;EACdI,KAAK,EAAE,IAAIN,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMO,SAAS,GAAGN,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMO,QAAQ,GAAGP,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMQ,WAAW,GAAGR,GAAI;AACxB;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMS,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMP,YAAY,CAACQ,KAAK,CAAC;MACxCA,KAAK,EAAEL;IACT,CAAC,CAAC;IAEF,OAAOI,IAAI,CAACE,KAAK;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAOC,IAAY,IAAK;EAChD,IAAI;IACF,MAAMb,YAAY,CAACc,MAAM,CAAC;MACxBC,QAAQ,EAAEX,QAAQ;MAClBY,SAAS,EAAE;QACTH;MACF,CAAC;MACDI,cAAc,EAAE,CAAC;QAAET,KAAK,EAAEL;MAAU,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,MAAOC,EAAU,IAAK;EAC9C,IAAI;IACF,MAAMnB,YAAY,CAACc,MAAM,CAAC;MACxBC,QAAQ,EAAEV,WAAW;MACrBW,SAAS,EAAE;QACTG;MACF,CAAC;MACDF,cAAc,EAAE,CAAC;QAAET,KAAK,EAAEL;MAAU,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}