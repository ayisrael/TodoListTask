{"ast":null,"code":"// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import { getTasks } from \"../service/apiService\";\n\n// const initialState = {\n//   todoList: []\n// };\n\n// const todoSlice = createSlice({\n//   name: \"todoList\",\n//   initialState,\n//   reducers: {\n//     setTodoList:(state, action) => {\n//       state.todoList = action.payload\n//     },\n//     addTask: (state, action) => {\n\n//     },\n\n//     deleteTask: (state, action) => {\n\n//     },\n//   },\n\n// });\n\n// // export { fetchTasks };\n// export const { addTask, deleteTask } = todoSlice.actions;\n// // export default todoSlice.reducer;\n\n// export const {actions} = todoSlice;\n// export default todoSlice.reducer;\n// // export const selectTodoList = state => state. this is the addtodo: import { Button, Grid, Input } from \"@mui/material\";\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  todoList: []\n};\nconst todoSlice = createSlice({\n  name: \"todoList\",\n  initialState,\n  reducers: {\n    setTodoList: (state, action) => {\n      state.todoList = action.payload;\n    },\n    addTask: (state, action) => {\n      state.todoList.push(action.payload);\n    },\n    deleteTask: (state, action) => {\n      state.todoList = state.todoList.filter(item => item.id !== action.payload.delId);\n    },\n    toggleTask: (state, action) => {\n      const taskId = action.payload;\n      const taskIndex = state.todoList.findIndex(task => task.id === taskId);\n      if (taskIndex !== -1) {\n        const task = state.todoList[taskIndex];\n        task.iscompleted = !task.iscompleted;\n      }\n    }\n  }\n});\nexport const {\n  actions\n} = todoSlice;\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","todoList","todoSlice","name","reducers","setTodoList","state","action","payload","addTask","push","deleteTask","filter","item","id","delId","toggleTask","taskId","taskIndex","findIndex","task","iscompleted","actions","reducer"],"sources":["C:/Users/Normal_User9000/Desktop/toDoList/my-app-tsx/my-app/src/features/todoSlice.tsx"],"sourcesContent":["// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// import { getTasks } from \"../service/apiService\";\r\n\r\n// const initialState = {\r\n//   todoList: []\r\n// };\r\n\r\n// const todoSlice = createSlice({\r\n//   name: \"todoList\",\r\n//   initialState,\r\n//   reducers: {\r\n//     setTodoList:(state, action) => {\r\n//       state.todoList = action.payload\r\n//     },\r\n//     addTask: (state, action) => {\r\n    \r\n//     },\r\n\r\n//     deleteTask: (state, action) => {\r\n \r\n//     },\r\n//   },\r\n\r\n// });\r\n\r\n// // export { fetchTasks };\r\n// export const { addTask, deleteTask } = todoSlice.actions;\r\n// // export default todoSlice.reducer;\r\n\r\n// export const {actions} = todoSlice;\r\n// export default todoSlice.reducer;\r\n// // export const selectTodoList = state => state. this is the addtodo: import { Button, Grid, Input } from \"@mui/material\";\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport { TaskProps } from \"../comps/todoList\";\r\n\r\nexport interface TodoStateInterface {\r\n todoSlice: {\r\n  todoList: TaskProps[];\r\n };\r\n}\r\n\r\nconst initialState = {\r\n todoList: [] as Task[]\r\n};\r\n\r\n\r\nconst todoSlice = createSlice({\r\n name: \"todoList\",\r\n initialState,\r\n reducers: {\r\n  setTodoList:(state, action) => {\r\n   state.todoList = action.payload\r\n  },\r\n  addTask: (state, action) => {\r\n  state.todoList.push(action.payload);\r\n  },\r\n\r\n  deleteTask: (state, action) => {\r\n   state.todoList = state.todoList.filter(\r\n    (item) => item.id !== action.payload.delId\r\n   );\r\n  },\r\n\r\n  toggleTask: (state, action) => {\r\n   const taskId = action.payload;\r\n   const taskIndex = state.todoList.findIndex((task) => task.id === taskId);\r\n\r\n   if (taskIndex !== -1) {\r\n    const task = state.todoList[taskIndex];\r\n    task.iscompleted = !task.iscompleted;\r\n   }\r\n  },\r\n },\r\n});\r\n\r\nexport const {actions} = todoSlice;\r\nexport default todoSlice.reducer;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAS9C,MAAMC,YAAY,GAAG;EACpBC,QAAQ,EAAE;AACX,CAAC;AAGD,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC7BI,IAAI,EAAE,UAAU;EAChBH,YAAY;EACZI,QAAQ,EAAE;IACTC,WAAW,EAACA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACL,QAAQ,GAAGM,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,OAAO,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACL,QAAQ,CAACS,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IACnC,CAAC;IAEDG,UAAU,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACL,QAAQ,GAAGK,KAAK,CAACL,QAAQ,CAACW,MAAM,CACpCC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKP,MAAM,CAACC,OAAO,CAACO,KACtC,CAAC;IACF,CAAC;IAEDC,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAMU,MAAM,GAAGV,MAAM,CAACC,OAAO;MAC7B,MAAMU,SAAS,GAAGZ,KAAK,CAACL,QAAQ,CAACkB,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACN,EAAE,KAAKG,MAAM,CAAC;MAExE,IAAIC,SAAS,KAAK,CAAC,CAAC,EAAE;QACrB,MAAME,IAAI,GAAGd,KAAK,CAACL,QAAQ,CAACiB,SAAS,CAAC;QACtCE,IAAI,CAACC,WAAW,GAAG,CAACD,IAAI,CAACC,WAAW;MACrC;IACD;EACD;AACD,CAAC,CAAC;AAEF,OAAO,MAAM;EAACC;AAAO,CAAC,GAAGpB,SAAS;AAClC,eAAeA,SAAS,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}